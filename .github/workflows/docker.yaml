name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
      - name: Before freeing up disk space
        run: |
          echo "Before freeing up disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 128
          remove-dotnet: 'true'
          remove-haskell: 'true'
          build-mount-path: '/var/lib/docker/'

      - name: Restart docker
        run: |
          sudo service docker restart
          sleep 5  # 等待 Docker 服务完全启动

      - name: Free up disk space complete
        run: |
          echo "Free up disk space complete"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test network connectivity
        run: |
          echo "测试阿里云镜像仓库的网络连通性..."
          echo "注册表地址: $ALIYUN_REGISTRY"
          nslookup $ALIYUN_REGISTRY || true
          curl -vI https://$ALIYUN_REGISTRY || true

      - name: Build and push image Aliyun
        run: |
          # 调试输出变量值（确保 Secrets 已正确设置）
          echo "阿里云注册表地址: $ALIYUN_REGISTRY"
          echo "命名空间: $ALIYUN_NAME_SPACE"
          echo "用户名: $ALIYUN_REGISTRY_USER"
          
          # 安全登录到阿里云镜像仓库
          echo "尝试登录阿里云镜像仓库..."
          echo "$ALIYUN_REGISTRY_PASSWORD" | docker login -u "$ALIYUN_REGISTRY_USER" --password-stdin "$ALIYUN_REGISTRY" || {
            echo "登录失败！请检查以下内容："
            echo "1. Secrets 中的 ALIYUN_REGISTRY 是否格式正确（例如 registry.cn-hangzhou.aliyuncs.com）"
            echo "2. ALIYUN_REGISTRY_USER 和 ALIYUN_REGISTRY_PASSWORD 是否正确"
            exit 1
          }

          # 后续的镜像处理逻辑
          declare -A duplicate_images
          declare -A temp_map
          while IFS= read -r line || [ -n "$line" ]; do
              [[ -z "$line" ]] && continue
              if echo "$line" | grep -q '^\s*#'; then
                  continue
              fi
              
              image=$(echo "$line" | awk '{print $NF}')
              image="${image%%@*}"
              echo "image $image"
              image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
              echo "image_name_tag $image_name_tag"
              name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
              echo "name_space: $name_space"
              name_space="${name_space}_"
              image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
              echo "image_name: $image_name"
              
              if [[ -n "${temp_map[$image_name]}" ]]; then
                   if [[ "${temp_map[$image_name]}" != $name_space  ]]; then
                      echo "duplicate image name: $image_name"
                      duplicate_images[$image_name]="true"
                   fi
              else
                  temp_map[$image_name]=$name_space
              fi       
          done < images.txt
          
          while IFS= read -r line || [ -n "$line" ]; do
              [[ -z "$line" ]] && continue
              if echo "$line" | grep -q '^\s*#'; then
                  continue
              fi
          
              echo "docker pull $line"
              docker pull $line
              platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
              echo "platform is $platform"
              if [ -z "$platform" ]; then
                  platform_prefix=""
              else
                  platform_prefix="${platform//\//_}_"
              fi
              echo "platform_prefix is $platform_prefix"
              image=$(echo "$line" | awk '{print $NF}')
              image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
              name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
              image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
          
              name_space_prefix=""
              if [[ -n "${duplicate_images[$image_name]}" ]]; then
                 if [[ -n "${name_space}" ]]; then
                    name_space_prefix="${name_space}_"
                 fi
              fi
              
              image_name_tag="${image_name_tag%%@*}"
              new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"
              echo "docker tag $image $new_image"
              docker tag $image $new_image
              echo "docker push $new_image"
              docker push $new_image
              echo "开始清理磁盘空间"
              echo "=============================================================================="
              df -hT
              echo "=============================================================================="
              docker rmi $image
              docker rmi $new_image
              echo "磁盘空间清理完毕"
              echo "=============================================================================="
              df -hT
              echo "=============================================================================="     
              
          done < images.txt
